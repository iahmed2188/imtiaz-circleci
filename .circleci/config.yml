jobs:
  wizcli_scan:
    machine: true
    working_directory: ~/app
    parameters:
        image:
          type: string
          # this example will use a pre-built image, with nginx set as the deafult.
          # the example can be modified to run post a build step, instead of pulling
          default: "nginx:latest"
        policy:
          type: string
          # Wiz CI policy name to be used.
          default: "Wiz policy"
    steps:
      # Running the built-in checkout script to checkout the code in this repo
      - checkout
      # Step to pull Dockerfile from git and build it for image scan
      - run:
          name: Build Image
          command: docker build -t parameters.image .
      # Step to download WizCLI from the inter-webs
      - run:
          
          name: Download wizcli
          command: |
            sudo mkdir -p /wizcli
            sudo curl -o /wizcli/wizcli https://wizcli.app.wiz.io/wizcli
            sudo chmod +x /wizcli/wizcli
      # Log the scan time
      - run: date +%F > date
      # Step to restore authentication cache and re-use if exists
      - restore_cache:
          key: wizcli-{{ .Environment.WIZCLI_ID }}-{{ checksum "date" }}
      # Attempt a scan from cache, then try to authenticate if not available
      # docker pull is attemped, but the example can be converted to trigger right after a build step instead
      - run:
          name: Scan Docker image
          command: |
            set +eo pipefail
            printf "\nAttemping image scan with auth from cache\n"
            WIZ_ENV=test /wizcli/wizcli docker scan --image  parameters.image  --policy " parameters.policy "
            exitCode=$?
            if [ $exitCode -eq 3 ]; then
              # Time to authenticate!
              printf "\nCould not authenticate from cache, auth-ing and running the scan\n"
              # ${WIZCLI_ID} and ${WIZCLI_SECRET} are variables you declared in step 2c
              WIZ_ENV=test /wizcli/wizcli auth --id ${WIZCLI_ID} --secret ${WIZCLI_SECRET}
              WIZ_ENV=test /wizcli/wizcli docker scan --image parameters.image
              exitCode=$?
            fi
            exit $exitCode
      # Save auth cache for next time
      - save_cache:
          key: wizcli-{{ .Environment.WIZCLI_ID }}-{{ checksum "date" }}
          paths:
            - ~/.wiz/auth.json   

# In your workflow, make sure to trigger the wizcli_scan job you just declared above (it can trigger after a docker_build job):
workflows:
  version: 2
  build_workflow:
    jobs:
      - wizcli_scan
